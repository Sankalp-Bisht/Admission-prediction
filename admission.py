# -*- coding: utf-8 -*-
"""Admission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wpR3wgragziLQU4Af5J9nzSFCElurT6m
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
import math

from pylab import rcParams

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
rcParams['figure.figsize']=5,4

dataset=pd.read_csv('Admission_Predict.csv')

dataset.head(5)

y=dataset['Chance of Admit ']

X=dataset.drop(['Serial No.','Chance of Admit '],axis=1)

X.shape

y.shape

X_train=X[0:325]
y_train=y[0:325]
X_test=X[326:400]
y_test=y[326:400]

X_train["x0"]=1
X_test["x0"]=1

def hypo(x,theta):
 return np.dot(x,theta)

import seaborn as sns

import random
theta=[]

for i in range(8):
  x=random.random()
  theta.append(x);

theta=np.array(theta)

h=hypo(X_train,theta.transpose())
h.shape

def mse(coef, x, y): 
    h=hypo(x,coef)
    return np.mean((h - y)**2)/2

def gradients(coef, x, y): 
    return np.mean(x.transpose()*(np.dot(x, coef) - y), axis = 1)

def multilinear_regression(coef, x, y, lr, b1 = 0.9, b2 = 0.999, epsilon = 1e-8): 
    prev_error = 0
    m_coef = np.zeros(coef.shape) 
    v_coef = np.zeros(coef.shape) 
    moment_m_coef = np.zeros(coef.shape) 
    moment_v_coef = np.zeros(coef.shape) 
    t = 0
  
    while True: 
        error = mse(coef, x, y) 
        if abs(error - prev_error) <= epsilon: 
            break
        prev_error = error 
        grad = gradients(coef, x, y) 
        t += 1
        m_coef = b1 * m_coef + (1-b1)*grad 
        v_coef = b2 * v_coef + (1-b2)*grad**2
        moment_m_coef = m_coef / (1-b1**t) 
        moment_v_coef = v_coef / (1-b2**t) 
  
        delta = ((lr / moment_v_coef**0.5 + 1e-8) * 
                 (b1 * moment_m_coef + (1-b1)*grad/(1-b1**t))) 
  
        coef = np.subtract(coef, delta) 
    return coef

plt.plot(X_train,y_train,'r')
plt.plot(X_train,h,'g')

theta=multilinear_regression(theta, X_train, y_train, 1e-1)

h=hypo(X_train,theta.transpose())

plt.plot(X_train,y_train,'r')

plt.plot(X_train,h,'g')

from sklearn.metrics import r2_score

h2=hypo(X_test,theta)

r2_score(y_test,h2)